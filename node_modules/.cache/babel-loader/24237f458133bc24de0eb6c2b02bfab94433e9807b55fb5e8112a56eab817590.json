{"ast":null,"code":"// App.js\nimport'./App.css';import About from'./components/About';//import Alert from './components/Alert';\nimport Header from'./components/Header';import TextToUpper from'./components/TextToUpper';import React,{useState}from'react';//import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[mode,setMode]=useState('light');const[alert,setAlert]=useState(null);const showAlert=(message,type)=>{setAlert({msg:message,type:type});setTimeout(()=>{setAlert(null);},1000);};const toggleMode=()=>{if(mode==='light'){setMode('dark');showAlert(\"Dark Mode has been enabled!\",\"success\");}else{setMode('light');showAlert(\"Light Mode has been enabled!\",\"success\");}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{mode:mode,toggleMode:toggleMode}),/*#__PURE__*/_jsxs(\"div\",{className:\"container my-3\",children:[/*#__PURE__*/_jsx(TextToUpper,{heading:\"Text to UpperCase\"}),/*#__PURE__*/_jsx(About,{})]})]});}export default App;","map":{"version":3,"names":["About","Header","TextToUpper","React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","children","className","heading"],"sources":["/var/www/html/react-dev/src/App.js"],"sourcesContent":["// App.js\n\nimport './App.css';\nimport About from './components/About';\n//import Alert from './components/Alert';\nimport Header from './components/Header';\nimport TextToUpper from './components/TextToUpper';\nimport React, { useState } from 'react';\n//import { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      showAlert(\"Dark Mode has been enabled!\", \"success\");\n    } else {\n      setMode('light');\n      showAlert(\"Light Mode has been enabled!\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* // <BrowserRouter>\n    //   <Header mode={mode} toggleMode={toggleMode} />\n    //   <Alert alert={alert} />\n    //   <div className=\"container my-3\">\n    //     <Routes>\n    //       <Route path=\"/\" element={<TextToUpper heading=\"Text to UpperCase\" />} />\n    //       <Route path=\"/about\" element={<About />} />\n    //     </Routes>\n    //   </div>\n    // </BrowserRouter> */}\n      <Header mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <TextToUpper heading=\"Text to UpperCase\" />\n        <About />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA;AAEA,MAAO,WAAW,CAClB,MAAO,CAAAA,KAAK,KAAM,oBAAoB,CACtC;AACA,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEA,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,OAAO,CAAC,CACzC,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAY,SAAS,CAAGA,CAACC,OAAO,CAAEC,IAAI,GAAK,CACnCH,QAAQ,CAAC,CACPI,GAAG,CAAEF,OAAO,CACZC,IAAI,CAAEA,IACR,CAAC,CAAC,CACFE,UAAU,CAAC,IAAM,CACfL,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED,KAAM,CAAAM,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAIT,IAAI,GAAK,OAAO,CAAE,CACpBC,OAAO,CAAC,MAAM,CAAC,CACfG,SAAS,CAAC,6BAA6B,CAAE,SAAS,CAAC,CACrD,CAAC,IAAM,CACLH,OAAO,CAAC,OAAO,CAAC,CAChBG,SAAS,CAAC,8BAA8B,CAAE,SAAS,CAAC,CACtD,CACF,CAAC,CAED,mBACER,KAAA,CAAAE,SAAA,EAAAY,QAAA,eAWEhB,IAAA,CAACL,MAAM,EAACW,IAAI,CAAEA,IAAK,CAACS,UAAU,CAAEA,UAAW,CAAE,CAAC,cAC9Cb,KAAA,QAAKe,SAAS,CAAC,gBAAgB,CAAAD,QAAA,eAC7BhB,IAAA,CAACJ,WAAW,EAACsB,OAAO,CAAC,mBAAmB,CAAE,CAAC,cAC3ClB,IAAA,CAACN,KAAK,GAAE,CAAC,EACN,CAAC,EACN,CAAC,CAEP,CAEA,cAAe,CAAAW,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}